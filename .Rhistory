a <- available.packages()
head(a,10)
install.packages(c("slidify","ggplot2","devtools"))
library(devtools)
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
search()
a <- NULL
T == T
T == TRUE
isTRUE(3)
xor(FALSE,FALSE)
help(standard deviation)
help("standard deviation"")
clear()
find("standard deviation")
library(help = "stats")
?mean
?deviation
??deviation
?stats::sd
?sd
?gl
library(datasets)
data("iris")
?iris
length(iris)
head(iris$Species)
levels <- "virginica"
tapply(iris, virginica, mean)
tapply(iris, levels, mean)
?tapply
levels <- gl(iris, "virginica")
?gl
?iris
levels(iris)
?apply
apply(iris,"virginica",mean)
apply(iris,[:5],mean)
?split
tapply(iris$Sepal.Length,iris$Species, mean)
rowMeans(iris)
rowMeans(iris,[1:4])
?rowMeans
rowMeans(iris$Sepal.Length)
rowMeans(iris[,1:4])
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
?apply
colMeans(iris[,1:4])
data(mtcars)
?mtcars
levels <- NULL
head(mtcars$mpg)
colMeans(mtcars)
table(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
n
?debug
ls()
quit
quit
quit
?solve
set.seed(1)
rpois(5,2)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size)
)
fiter(cran, package=="swirl")
filter(cran, package=="swirl")
filter(cran, r_version =="3.1.1", country=="US")
?Comparison
filter(cran, r_version <="3.0.2", country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size>100500, r_or=="linux-gnu")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran(size:ip_id))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
play()
?n
?n_distinct
source('/tmp/RtmpAQ2A7l/summarize1.R')
nxt()
submit()
source('/tmp/RtmpAQ2A7l/summarize1.R')
submit()
pack_sum
quantile(pack)sum$count, probs=0.99)
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
?arrange
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
play()
summarize(by_package, mean(size))
summarize(by_package, avg_size = mean(size))
nxt()
submit()
submit()
submit()
View(result3)
source('/tmp/RtmpAQ2A7l/chain1.R')
submit()
source('/tmp/RtmpAQ2A7l/chain2.R')
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
?bind_rows
bind_rows(passed,failed)
sat
?separate
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours=10, minutes=16, seconds =0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17,minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?i=with_tz
?with_tz
arrive <- with_tz(arrive,tzone="Asia/Hong_Kong")
print(arrive)
last_time <- mdy("June 17,2008", tz="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
source('~/coursera/getting_data/week2/hw_question_2.R')
html <- run()
?split
head(html)
?"httr"
source('~/coursera/getting_data/week2/hw_question_2.R')
html <- run()
class(html)
source('~/coursera/getting_data/week2/hw_question_2.R')
html <- run()
html
source('~/coursera/getting_data/week2/hw_question_2.R')
html <- run()
html
?cat
source('~/coursera/getting_data/week2/hw_question_2.R')
html <- run()
spl <- strsplit(html,"\n")
dim(spl)
spl[40]
spl[[1]]
spl[1]
?strsplit
spl <- strsplit(html,"\n")[[1]]
spl
spl[180]
nchar(spl[10])
nchar(spl[20])
nchar(spl[30])
nchar(spl[100])
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for',destfile="/noaa.for")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for',destfile="noaa.for")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for',destfile="noaa.for",method="CURL")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for',destfile="noaa.for",method="curl")
noaa <- read.fwf('noaa.for')
?read.fwf
noaa <- read.fwf('noaa.for',skips=4,widths=c(9,5,8,5,8,5,8,5,8))
noaa <- read.fwf('noaa.for',skip=4,widths=c(9,5,8,5,8,5,8,5,8))
View(noaa)
noaa <- read.fwf('noaa.for',skip=4,widths=c(9,8,8,8,8))
noaa <- read.fwf('noaa.for',skip=4,widths=c(10,8,8,8,8))
noaa <- read.fwf('noaa.for',skip=4,widths=c(10,5,8,5,8,5,8,5,8))
noaa <- read.fwf('noaa.for',skip=4,widths=c(10,8,8,8,8))
noaa <- read.fwf('noaa.for',skip=4,widths=c(10,7,4,8,8,8))
noaa <- read.fwf('noaa.for',skip=4,widths=c(14,13,13,13,8))
noaa <- read.fwf('noaa.for',skip=4,widths=c(14,13,13,13,10))
noaa <- read.fwf('noaa.for',skip=4,widths=c(12, 7,4, 9,4, 9,4, 9,4))
library(dplyr)
tbl <- tbl_df(noaa)
col4 <- select(tbl_df,V4)
col4 <- select(tbl,V4)
View(col4)
result <- summarize(col4,sum)
result <- summarize(col4,res=sum())
result <- summarize(col4,res=sum)
?summarize
result <- summarize(col4,sum(V4))
result
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(lubridate)
times <- sapply(sampleTimes,ymd_hms)
times
str(sampleTimes)
times <- sapply(sampleTimes,ymd)
times
sapply(times,year(x)==2012)
sapply(times,function(x){year(x)==2012})
for(t in times){ if(year(t)==2012){print(t)}}
year(times[1])
?times
?year
grep("^2012",sampleTimes)
grep("^2012",sampleTimes,value=TRUE)
table(grepl("^2012",sampleTimes))
year(times[1])
times[1]
year(times[1])
year(ymd(sampleTimes[1]))
source('~/coursera/getting_data/week4/quiz.R')
getmonths(sampleTimes)
lapply(times,month)
sapply(times,month)
sapply(times,year)
month(times[1])
source('~/coursera/getting_data/week4/quiz.R')
getmonths(sampleTimes)
sampleTimes[1]
hour(times[2])
times[2]
hour(sampleTimes[2])
month(sampleTimes[2])
month(sampleTimes[2],label=TRUE)
sampleTimes[2]
year(sampleTimes[2])
times <- sampleTimes[year()==2012]
times <- sampleTimes[grep("^2012",x)]
times <- sampleTimes[grep("^2012",sampleTimes)]
sapply(times,funtion(x){month(x)==5})
sapply(times,function(x){month(x)==5})
table(sapply(times,function(x){month(x)==5}))
table(sapply(times,function(x){day(x,labels=TRUE)=="Monday"}))
table(sapply(times,function(x){day(x,label=TRUE)=="Monday"}))
table(sapply(times,function(x){day(x)=="Monday"}))
table(sapply(times,function(x){day(x)==1}))
table(sapply(times,function(x){day(x)==2}))
table(sapply(times,function(x){day(x)==0}))
?month
?day
table(sapply(times,function(x){wday(x,label=TRUE)=="Monday"}))
wday(times[1])
wday(times[1],label=TRUE)
table(sapply(times,function(x){wday(x,label=TRUE)=="Mon"}))
library(swirl)
swirl()
?Devices
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
def.off()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(airquality)
xyplot(Ozone ~ Wind, data=airquality)
xyplot(Ozone ~ Wind, data=airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month),data=airquality,layout=c(5,1))
xyplot(Ozone ~ Wind | Month,data=airquality,layout=c(5,1))
p <- xyplot(Ozone ~ Wind, data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
with(diamonds,table(color,cut))
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot( price ~ carat | color*cut, data=diamonds, strip=FALSE, pch = 20, xlab = myxlab, ylab=myylab, main=mymain)
xyplot( price ~ carat | color*cut, data=diamonds, pch = 20, xlab = myxlab, ylab=myylab, main=mymain)
library(lattice)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis.par.set
install.packages('knitr','markdown','slidify')
setwd("~/coursera/reproducible/project1/RepData_PeerAssessment1/")
x <- read.csv('activity.csv')
View(x)
?plot
?histogram
??histogram
?hist
library(dplyr)
x <- group_by(x, date)
x <- summarize(x, total.steps = sum(steps))
?mean
y <- read.csv('activity.csv')
View(y)
daily.pattern <- group_by(y, interval) %>% summarize(steps=mean(steps))
summary(daily.pattern)
View(daily.pattern)
?summarize
daily.pattern <- group_by(y, interval) %>% summarize(steps=mean(steps, na.rm=TRUE))
plot(daily.pattern,type="1")
plot(daily.pattern,type="l")
summary(daily.pattern)
?max
maxed <- arrange(daily.pattern,steps)
maxed[1]
maxed <- arrange(daily.pattern,-steps)
maxed[1]
daily.pattern[steps=max(steps)]
daily.pattern[steps=max(steps),]
daily.pattern[,steps=max(steps)]
daily.pattern[,daily.pattern$steps=max(daily.pattern$steps)]
m <- max(daily.pattern$steps)
daily.pattern[,steps=m]
daily.pattern[steps=m,]
filter(daily.pattern,steps=m)
filter(daily.pattern,steps==m)
y[is.na==TRUE]
y[is.na(steps)==TRUE]
y[is.na(y$steps)==TRUE]
count(filter(y, is.na(steps)==TRUE))
count(is.na(y$steps)==TRUE)
is.na(y$steps)
is.na(y$steps) == TRUE
y[is.na(y$steps) == TRUE,]
sum(is.na(y$steps))
for(row in y) { print(y) }
for(row in y) { print(y$steps) }
for(row in y) { print(is.na(y$steps)) }
for(row in y) { print(is.na(y$steps)) }
assign(filled,y)
?assign
assign(y,filled)
assign("filled",y)
install.packages('norm')
library(norm)
s <- prelim.norm(filled)
z <- data(filled)
interval.means <- group_by(activity, interval) %>% summarize(mean=mean(steps))
interval.means <- group_by(y, interval) %>% summarize(mean=mean(steps))
View(interval.means)
interval.means <- group_by(y, interval) %>% summarize(mean=mean(steps,rm.na=TRUE))
View(interval.means)
interval.means <- group_by(y, interval) %>% summarize(mean=mean(steps,na.rm=TRUE))
interval.means[interval==5]
interval.means[interval.means$interval==5]
interval.means[interval.means$interval==5,]
interval.means[interval.means$interval==5,]$mean
sapply(filled,function(x){ if(is.na(x)) {print(x$intmean)}})
sapply(filled,function(x){ print(x)}
}
sapply(filled,function(x){ print(x))
sapply(filled,function(x){ print(x)})
sapply(filled,function(x){ print(x[1])})
sapply(filled,function(x){ print(x[2])})
sapply(filled,function(x){if(is.na(x)) {print(x)} })
sapply(filled,function(x){if(is.na(x)) {x <- x[3]} })
View(filled)
sapply(filled,function(x){if(is.na(x[1])) {x[1] <- x[2]} })
f <- sapply(filled,function(x){if(is.na(x[1])) {x[1] <- x[2]} })
f
?replace
?na
?is.na
